function diffusionTKurs (Dots, Time, xMax, yMax)

% DIFFUSIONTKURS(ANZAHL,DAUER,XMAX,YMAX) draws the path of one
% diffusing particle. For more information see diffusionT.m.
%
% DIFFUSIONTKURS(ANZAHL,DAUER) uses xMax = 40, yMax = 30.
%
% DIFFUSIONTKURS uses anzahl = 20, dauer = 100 in addition.

% This file was generated by students as a partial fulfillment 
% for the requirements of the course "Fractals", Winter term
% 2004/2005, Stuttgart University.	

% Author : Fabian Hansch, Stefanie Schetter
% Date   : Dec 2004
% Version: 1.0


% default setting
if (nargin < 4)
    xMax = 40;
    yMax = 30;
end
if (nargin < 2)
    Dots = 20;
    Time = 100;
end

Position = zeros(2, Dots);
Direction = zeros(1, Dots);
% the variable for the path
Rate = zeros(2, Time);
% initialising the particles (random starting points)
for i = 1:Dots
    Direction(1, i) = rand(1)*2*pi;
    Position(1, i) = rand(1)*xMax;
    Position(2, i) = rand(1)*yMax;
end;

clf;
axis square; axis equal;
for i = 1:Time
    hold off;
    plot([0, 0, xMax, xMax, 0], [0, yMax, yMax, 0, 0], 'b-');
    hold on;
    plot([-10, -10, xMax+10, xMax+10, -10], [-10, yMax+10, yMax+10, -10, -10], 'b-');
    axis tight;
    % remembering the path
    Rate(1, i) = Position(1, 1);
    Rate(2, i) = Position(2, 1);
    for j = 1:Dots
       if (j == 1) 
           % plot the special particle
           plot(Position(1, j), Position(2, j), 'r.');
       else
           % plot all other particles
           plot(Position(1, j), Position(2, j), 'b.');
       end;
       for t = 1:Dots
           % is there another particle that hits the current one?
           if (t ~= j) & (sqrt((Position(1, j)-Position(1, t))^2 + (Position(2, j)-Position(2, t))^2))<=2
               if (Position(1, t) ~= Position(1, j))
                  bLine = atan((Position(2, t)-Position(2, j))/(Position(1, t)-Position(1, j)));
                else
                  bLine = pi/2;
               end;
               alpha1 = Direction(1, j);
               alpha2 = Direction(1, t);
               Direction(1, j) = mod(2*bLine - alpha2, 2*pi);
               Direction(1, t) = mod(2*bLine - alpha1, 2*pi);
           end;
       end;
       % calculating the new positions
       Position(1, j) = Position(1, j) + 2*cos(Direction(1, j));
       Position(2, j) = Position(2, j) + 2*sin(Direction(1, j));
       
       % is there a wall?
       if (Position(1, j) >= xMax)
           Direction(1, j) = pi - Direction(1, j);
           Position(1, j) = xMax;
       end;
       if (Position(1, j) <= 0)
           Direction(1, j) = pi - Direction(1, j);
           Position(1, j) = 0;
       end;
       if (Position(2, j) >= yMax)
           Direction(1, j) = 2*pi - Direction(1, j);
           Position(2, j) = yMax;
       end;
       if (Position(2, j) <= 0)
           Direction(1, j) = 2*pi - Direction(1, j);
           Position(2, j) = 0;
       end;
       Direction(1, j) = mod(Direction(1, j), 2*pi);
    end;
    pause (1/24);
end;
pause;
clf;
x = 1:Time;
hold on;
% plotting the path
plot([0, 0, xMax, xMax, 0], [0, yMax, yMax, 0, 0], 'b-');
hold on;
plot([-10, -10, xMax+10, xMax+10, -10], [-10, yMax+10, yMax+10, -10, -10], 'b-');
hold on;   
plot(Rate(1, x), Rate(2, x), 'r-');
axis tight;
hold off;