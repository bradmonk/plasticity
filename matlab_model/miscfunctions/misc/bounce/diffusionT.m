function diffusionT (Anzahl, Dauer, xMax, yMax)

% DIFFUSIONT(ANZAHL,DAUER,XMAX,YMAX) simulates multiple particles 
% (the number of the particles is anzahl) in a fixed frame 
% of size [xMax, yMax]. These particles hit the wall or each other
% and hence change their impulse.
% dauer is the number of times the whole system changes.
%
% DIFFUSIONT(ANZAHL,DAUER) uses xMax = 40, yMax = 30.
%
% DIFFUSIONT uses anzahl = 20, dauer = 100 in addition.

% This file was generated by students as a partial fulfillment 
% for the requirements of the course "Fractals", Winter term
% 2004/2005, Stuttgart University.	

% Author : Fabian Hansch, Stefanie Schetter
% Date   : Dec 2004
% Version: 1.0


% default setting
if (nargin < 4)
    xMax = 40;
    yMax = 30;
end
if (nargin < 2)
    Anzahl = 20;
    Dauer = 100;
end

Position = zeros(2, Anzahl);
Richtung = zeros(1, Anzahl);
for i = 1:Anzahl
    % initialise the particles (random starting points and impulses)
    Richtung(1, i) = rand(1)*2*pi;
    Position(1, i) = rand(1)*xMax;
    Position(2, i) = rand(1)*yMax;
end;

clf;
axis square; axis equal;

for i = 1:Dauer
    hold off;
    plot([0, 0, xMax, xMax, 0], [0, yMax, yMax, 0, 0], 'b-');
    hold on;
    plot([-10, -10, xMax+10, xMax+10, -10], [-10, yMax+10, yMax+10, -10, -10], 'b-');
    for j = 1:Anzahl
       plot(Position(1, j), Position(2, j), 'r.');
       for t = 1:Anzahl
           % is there another particle hitting the current one?
           if (t ~= j) & (sqrt((Position(1, j)-Position(1, t))^2 + (Position(2, j)-Position(2, t))^2))<=2
               if (Position(1, t) ~= Position(1, j))
                  Lot = atan((Position(2, t)-Position(2, j))/(Position(1, t)-Position(1, j)));
                else
                  Lot = pi/2;
               end;
               % calculating the new directions
               alpha1 = Richtung(1, j);
               alpha2 = Richtung(1, t);
               Richtung(1, j) = mod(2*Lot - alpha2, 2*pi);
               Richtung(1, t) = mod(2*Lot - alpha1, 2*pi);
           end;
       end;
       % calculating the new positions
       Position(1, j) = Position(1, j) + 2*cos(Richtung(1, j));
       Position(2, j) = Position(2, j) + 2*sin(Richtung(1, j));
       
       % hitting a wall?
       if (Position(1, j) >= xMax)
           Richtung(1, j) = pi - Richtung(1, j);
           Position(1, j) = xMax;
       end;
       if (Position(1, j) <= 0)
           Richtung(1, j) = pi - Richtung(1, j);
           Position(1, j) = 0;
       end;
       if (Position(2, j) >= yMax)
           Richtung(1, j) = 2*pi - Richtung(1, j);
           Position(2, j) = yMax;
       end;
       if (Position(2, j) <= 0)
           Richtung(1, j) = 2*pi - Richtung(1, j);
           Position(2, j) = 0;
       end;
       % no obstacle - continue along the current direction
       Richtung(1, j) = mod(Richtung(1, j), 2*pi);
    end;
    pause (1/24);
end;